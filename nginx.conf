events {}

http {
    # Define upstreams for each microservice
    upstream user {
        server localhost:3001;
    }

    upstream cart {
        server localhost:3002;
    }

    upstream product-catalog {
        server localhost:3003;
    }

    upstream order {
        server localhost:3004;
    }

    upstream payment {
        server localhost:3005;
    }

    upstream notification {
        server localhost:3006;
    }

    upstream auth {
        server localhost:3007;
    }

    server {
        listen 80;
        server_name localhost;


        location /api/auth/ {
            proxy_pass http://auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/user/ {
            proxy_pass http://user/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Cart service (authentication required)
        location /api/cart/ {
            proxy_pass http://cart/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Product catalog service (no authentication)
        location /api/product-catalog/ {
            proxy_pass http://product-catalog/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Order service (authentication required)
        location /api/order/ {
            proxy_pass http://order/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Payment service (authentication required)
        location /api/payment/ {
            proxy_pass http://payment/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Notification service (authentication required)
        location /api/notification/ {
            proxy_pass http://notification/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }


    }
}


# 1. proxy_set_header Content-Length "";
# This line essentially sets the Content-Length header to an empty value, which means that the auth-verify request will be sent without a request body.

# When NGINX makes a subrequest (like the auth_request in your configuration), it does not need to pass any request body to the /auth-verify location, because itâ€™s only intended to check the authentication status, not to process the main request body.

# If NGINX sends the Content-Length header with a value greater than 0, the upstream service (auth/verify in this case) might expect a request body, which could lead to a delay or timeout if there is no actual body sent. By explicitly setting Content-Length to an empty value, you are indicating that there is no body to be sent, which avoids this potential issue.

# Why it works:

# Without this line, the auth service might be waiting for a body to arrive, causing the request to hang or timeout (as seen in your earlier error message).
# With this line, NGINX properly indicates that no request body is being sent, so the auth service can immediately process the request and respond.